

----STARTUP---- (29 April 2024 16:44:40) as /home/Estudiante/Documentos/agus/linux64/linux64/CuisUniversity-6169.image!


----End fileIn of /home/Estudiante/Documentos/agus/ISW1-2024-1C-Parcial.st----!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 17:11:50'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 17:11:50'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:13:46' prior: 50527584!
initializeRoomsWith: aNumberOfRooms

	rooms := OrderedCollection new.
	aNumberOfRooms timesRepeat: [rooms add: Room new.]
	"
	| ix |
	
	rooms := OrderedCollection new.
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
	"
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 17:13:49'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 17:13:49'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:13:57' prior: 50527971!
initializeRoomsWith: aNumberOfRooms

	rooms := OrderedCollection new.
	aNumberOfRooms timesRepeat: [rooms add: Room new.]
	
! !
!Floor methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:16:25'!
initializeWithRooms: aNumberOfRooms andPrice: aPriceList
	
! !
!Floor methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:17:07' prior: 50528025!
initializeWithRooms: aNumberOfRooms andPrice: aPriceList
	self initializeRoomsWith: aNumberOfRooms .
	self initializeWith: aPriceList .
! !
!Floor methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:17:26' prior: 50528030!
initializeWithRooms: aNumberOfRooms andPrice: aPriceList
	self initializeRoomsWith: aNumberOfRooms .
	prices := aPriceList.! !

!methodRemoval: FloorTest #createFloorWith:and: stamp: 'ap 4/29/2024 17:17:51'!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new.
	floor setNumberOfRooms: aNumberOfRooms.
	floor setPrices: aPrice.
	
	^ floor.!
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:19:55'!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList.! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:20:10' prior: 50528051!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList.
	self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:20:17' prior: 50528056!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList.
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:20:59' prior: 50526826!
test01CannotCreateFloorWithoutRooms

	self
		should: [Floor floorWithRoomAmount: 0 andPrices: self defaultPriceList ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Floor numberOfRoomsMustBePositiveErrorDescription ! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:21:03'!
FAILURE!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:21:03'!
FAILURE!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:21:30'!
FAILURE!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:21:30'!
FAILURE!

!methodRemoval: Floor #initializeWith: stamp: 'ap 4/29/2024 17:22:59'!
initializeWith: aPriceList

	prices := aPriceList!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:23:12'!
FAILURE!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 17:23:12'!
ERROR!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:23:22'!
FAILURE!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:23:22'!
FAILURE!
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:26:02' prior: 50528063!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList
	(aNumberOfRooms > 0) ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription ].
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:26:05'!
PASSED!
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:27:01' prior: 50528138!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList
	aNumberOfRooms > 0 ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription ].
	aNumberOfRooms isInteger ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:27:24' prior: 50528151!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList
	aNumberOfRooms > 0 ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription ].
	(aNumberOfRooms isKindOf: Integer) ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:27:27'!
ERROR!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:27:27'!
ERROR!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:27:49' prior: 50526835!
test02CannotCreateFloorWithNoIntergerNumberOfRooms

	self
		should: [ Floor floorWithRoomAmount: 1.5 andPrices: self defaultPriceList ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Floor numberOfRoomsMustBeIntegerErrorDescription ! !

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:27:51'!
PASSED!
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:29:05' prior: 50528164!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList
	aNumberOfRooms > 0 ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription ].
	(aNumberOfRooms isKindOf: Integer) ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	
	aPriceList size > 0  ifFalse: [self error: self pricesListCannotBeEmptyErrorDescription ].
	
	
	
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:29:31' prior: 50526845!
test03CannotCreateFloorWithoutPrices

	self
		should: [ Floor floorWithRoomAmount: 10 andPrices: Dictionary new]
		raise: Error - MessageNotUnderstood 
		withMessageText: Floor pricesListCannotBeEmptyErrorDescription ! !

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 17:29:33'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:30:05' prior: 50526854!
test04WhenAFloorIsCreatedAllTheRoomsAreAvailable

	| floor |
	
	floor :=  Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	self assert: floor isAvailable.
	self assert: 0 equals: floor totalRoomsOccupied.
	self assert: 0 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 17:30:07'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:30:37' prior: 50526865!
test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne

	| floor |
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 0 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 17:30:48'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:31:16' prior: 50526882!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 17:31:20'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:31:37' prior: 50526908!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne

	| floor  |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 17:31:46'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:32:03' prior: 50526924!
test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.
		
	self assert: (100*peso) + (200*peso) + (50*peso) equals: floor totalProfits
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:32:15' prior: 50526940!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.
		
	self assert: (200*peso) * 7 equals: floor totalLosses
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 17:32:25'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 17:32:25'!
PASSED!
!Hotel class methodsFor: 'instance creation' stamp: 'ap 4/29/2024 17:34:49'!
hotelWithFloors: aFloorList
	^self new initializeWithFloors: aFloorList.
	! !
!Hotel methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:35:47'!
initializeWithFloors: aFloorList.
	floors := aFloorList.

	availableRoomsCount := aFloorList size.
! !
!Hotel methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:35:55' prior: 50528385!
initializeWithFloors: aFloorList.

	floors := aFloorList.

	availableRoomsCount := aFloorList size.
! !

!methodRemoval: Hotel #initialize stamp: 'ap 4/29/2024 17:36:00'!
initialize

	availableRoomsCount := 0.
!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:36:42' prior: 50526989!
test01CannotCreateHotelWithoutFloors

	self
		should: [ Hotel initializeWithFloors: OrderedCollection new. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Hotel noFloorsErrorDescription.! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:37:25' prior: 50528198!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList

	aNumberOfRooms > 0 ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription ].
	(aNumberOfRooms isKindOf: Integer) ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	
	aPriceList size > 0  ifFalse: [self error: self pricesListCannotBeEmptyErrorDescription ].
	
	
	
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:39:27' prior: 50528410!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList

	self assertIsPositive: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription].
	self assertIsPositive: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	aPriceList size > 0  ifFalse: [self error: self pricesListCannotBeEmptyErrorDescription ].
	
	
	
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:39:53'!
assertValidPrices: aPriceList andRooms: aNumberOfRooms

	self assertIsPositive: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription].
	self assertIsPositive: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	aPriceList size > 0  ifFalse: [self error: self pricesListCannotBeEmptyErrorDescription ]! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:39:53' prior: 50528427!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList

	self assertValidPrices: aPriceList andRooms: aNumberOfRooms.
	
	
	
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !
!Floor class methodsFor: 'creation' stamp: 'ap 4/29/2024 17:40:05' prior: 50528459!
floorWithRoomAmount: aNumberOfRooms andPrices: aPriceList

	self assertValidPrices: aPriceList andRooms: aNumberOfRooms.
	
	^self new initializeWithRooms: aNumberOfRooms andPrice: aPriceList.! !
!Hotel class methodsFor: 'instance creation' stamp: 'ap 4/29/2024 17:40:28' prior: 50528380!
hotelWithFloors: aFloorList
	self assertHaveFloors: aFloorList .
	^self new initializeWithFloors: aFloorList.
	! !
!Hotel class methodsFor: 'instance creation' stamp: 'ap 4/29/2024 17:40:59'!
withFloors: aFloorList
	self assertHaveFloors: aFloorList .
	^self new initializeWithFloors: aFloorList.
	! !

!methodRemoval: Hotel class #hotelWithFloors: stamp: 'ap 4/29/2024 17:40:59'!
hotelWithFloors: aFloorList
	self assertHaveFloors: aFloorList .
	^self new initializeWithFloors: aFloorList.
	!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:41:08' prior: 50528401!
test01CannotCreateHotelWithoutFloors

	self
		should: [ Hotel withFloors: OrderedCollection new. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Hotel noFloorsErrorDescription.! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:41:10'!
PASSED!
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 17:41:49'!
defaultFloors

	^ OrderedCollection with: (self createFloorWith: 10 and: self defaultPriceList)
								      	 with: (self createFloorWith: 1 and: self defaultPriceList)! !
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 17:41:49' prior: 50527234!
createHotel

	^ Hotel new 
		      setFloors: (self defaultFloors).
								! !

!methodRemoval: HotelTest #createHotel stamp: 'ap 4/29/2024 17:41:56'!
createHotel

	^ Hotel new 
		      setFloors: (self defaultFloors).
								!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:42:19' prior: 50526998!
test02NewHotelsAreEmpty

	| hotel |
	
	hotel := Hotel withFloors: self defaultFloors .
	
	self assert: hotel isEmpty.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:42:32' prior: 50527004!
test03HotelCanReceiveATypeOfGuestInRoomAtFloor

	| hotel |
	
	hotel := Hotel withFloors: self defaultFloors .
	
	self assert: hotel totalRooms equals: hotel	 totalRoomsAvailable.

	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 2.

	self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
	self assert: 0 equals: hotel totalRoomsReserved.
	self assert: 1 equals: hotel totalRoomsOccupied.
! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:42:38' prior: 50527019!
test04HotelCanTakeAReservationForARoomAtFloor

	| hotel |
	
	hotel := Hotel withFloors: self defaultFloors .

	self assert: hotel totalRooms equals: hotel	 totalRoomsAvailable.

	hotel reserveRoom: 2 atFloor: 1.

	self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
	self assert: 1 equals: hotel totalRoomsReserved.
	self assert: 1 equals: hotel totalRoomsOccupied.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:42:43' prior: 50527033!
test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor

	| hotel |
	
	hotel := Hotel withFloors: self defaultFloors .
	
	self assert: hotel totalRooms equals: hotel	 totalRoomsAvailable.

	hotel reserveRoom: 2 atFloor: 1.
	hotel receiveWithReservation: self guestTypeVacation atFloor: 1 atRoom: 2.

	self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
	self assert: 0 equals: hotel totalRoomsReserved.
	self assert: 1 equals: hotel totalRoomsOccupied.
! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:42:49' prior: 50527050!
test06HotelCannotReceiveWithReservationWithoutPreviousReservation
	
	| hotel |
	
	hotel := Hotel withFloors: self defaultFloors .
	
	self assert: hotel totalRooms equals: hotel	 totalRoomsAvailable.

	self 
		should: [ 	hotel receiveWithReservation: self guestTypeVacation atFloor: 1 atRoom: 2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [		:error |	
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.
			
			self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
			self assert: 0 equals: hotel totalRoomsReserved.
			self assert: 0 equals: hotel totalRoomsOccupied.
		]


! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:42:55'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 17:42:55'!
ERROR!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:43:02'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:43:07'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 17:43:07'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:43:07'!
ERROR!
!Floor class methodsFor: 'assertions' stamp: 'ap 4/29/2024 17:43:43' prior: 50528444!
assertValidPrices: aPriceList andRooms: aNumberOfRooms

	self assertIsPositive: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription].
	
	self assertIsPositive: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	
	aPriceList size > 0  ifFalse: [self error: self pricesListCannotBeEmptyErrorDescription ]! !
!Floor class methodsFor: 'assertions' stamp: 'ap 4/29/2024 17:43:50' prior: 50528690!
assertValidPrices: aPriceList andRooms: aNumberOfRooms

	self assertIsPositive: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBePositiveErrorDescription].
	
	self assertIsInteger: aNumberOfRooms ifFalse: [self error: self numberOfRoomsMustBeIntegerErrorDescription ].
	
	aPriceList size > 0  ifFalse: [self error: self pricesListCannotBeEmptyErrorDescription ]! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 17:43:55'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:44:02'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:44:05'!
ERROR!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:44:05'!
ERROR!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:44:15'!
ERROR!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:44:15'!
ERROR!
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 17:45:11' prior: 50528507!
defaultFloors

	^ OrderedCollection with: (Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList )
								      	 with: (Floor floorWithRoomAmount: 1 andPrices: self defaultPriceList )! !

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:45:16'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:45:20'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:45:23'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:45:23'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:45:23'!
FAILURE!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 17:45:23'!
FAILURE!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:45:23'!
FAILURE!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 17:45:23'!
FAILURE!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 17:45:23'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 17:45:23'!
ERROR!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 17:45:23'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 17:45:23'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 17:45:23'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 17:45:23'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 17:45:23'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:45:28'!
FAILURE!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:45:28'!
FAILURE!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:49:12'!
FAILURE!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:49:12'!
FAILURE!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:49:30'!
FAILURE!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:49:30'!
FAILURE!
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 17:51:22' prior: 50527716!
totalRooms

	^ floors sum: [:aFloor | aFloor rooms size].

! !
!Hotel methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:51:38' prior: 50528391!
initializeWithFloors: aFloorList.

	floors := aFloorList.

	availableRoomsCount := self totalRooms 
! !
!Hotel methodsFor: 'initialization' stamp: 'ap 4/29/2024 17:51:40' prior: 50528854!
initializeWithFloors: aFloorList.

	floors := aFloorList.

	availableRoomsCount := self totalRooms .
! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 17:54:09' prior: 50527731!
totalRoomsOccupied
	^floors inject: 0 into: [:roomsOcupiedUntilThisFloor :thisFloor | roomsOcupiedUntilThisFloor + 
		thisFloor count: [:room | room isOccupied].
		].


! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 17:54:28' prior: 50527744!
totalRoomsReserved

	^floors inject: 0 into: [:roomsOcupiedUntilThisFloor :thisFloor | roomsOcupiedUntilThisFloor + 
		thisFloor count: [:room | room isReserved].
		].

! !

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:54:33'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:54:33'!
ERROR!
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 17:55:05' prior: 50528874!
totalRoomsReserved

	^floors inject: 0 into: [:roomsOcupiedUntilThisFloor :thisFloor | roomsOcupiedUntilThisFloor + 
		(thisFloor count: [:room | room isReserved]).
		].

! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 17:55:25' prior: 50528866!
totalRoomsOccupied
	^floors inject: 0 into: [:roomsOcupiedUntilThisFloor :thisFloor | roomsOcupiedUntilThisFloor + 
		(thisFloor count: [:room | room isOccupied]).
		].


! !

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:55:32'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:55:32'!
ERROR!
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 17:55:49' prior: 50528897!
totalRoomsOccupied
	^floors inject: 0 into: [:roomsOcupiedUntilThisFloor :thisFloor | roomsOcupiedUntilThisFloor + 
		(thisFloor rooms count: [:room | room isOccupied]).
		].


! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 17:55:54' prior: 50528889!
totalRoomsReserved

	^floors inject: 0 into: [:roomsOcupiedUntilThisFloor :thisFloor | roomsOcupiedUntilThisFloor + 
		(thisFloor rooms count: [:room | room isReserved]).
		].

! !

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:55:57'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:56:00'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:56:02'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:56:04'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 17:56:05'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:56:06'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 17:56:08'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 17:56:09'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 17:56:09'!
ERROR!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:57:39' prior: 50527072!
test07HotelProfitsAreTheSumOfEachFloorProfits
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	floor2 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new setFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	self assert: floor1 totalProfits + floor2 totalProfits equals:		hotel totalProfits.! !

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 17:57:41'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:58:01' prior: 50527091!
test08HotelLossesAreTheSumOfEachFloorLosses
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	floor2 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new setFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	hotel reserveRoom: 4 atFloor: 1.
	hotel reserveRoom: 2 atFloor: 2.

	self assert: floor1 totalLosses + floor2 totalLosses equals:		hotel totalLosses.! !

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 17:58:02'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 17:58:02'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 17:58:02'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 17:58:02'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 17:58:02'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 17:58:02'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 17:58:07'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:58:21' prior: 50527112!
test09HotelCannotReserveANonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel reserveRoom: 42 atFloor: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]
! !

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 17:58:23'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:58:37' prior: 50527134!
test10HotelCannotReserveANonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel reserveRoom: 1 atFloor: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel floorNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:58:44' prior: 50527156!
test11HotelCannotReceiveAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:58:51' prior: 50527178!
test12HotelCannotReceiveAtNonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel receive: self guestTypeVacation atFloor: 42 atRoom: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel floorNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:58:58' prior: 50527201!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 1 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30'!
defaultlyPricedTenRoomFloor

	^ Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50528960!
test07HotelProfitsAreTheSumOfEachFloorProfits
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new setFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	self assert: floor1 totalProfits + floor2 totalProfits equals:		hotel totalProfits.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50529181!
test07HotelProfitsAreTheSumOfEachFloorProfits
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new setFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	self assert: floor1 totalProfits + floor2 totalProfits equals:		hotel totalProfits.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50529150!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 1 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 17:59:30' prior: 50528769!
defaultFloors

	^ OrderedCollection with: (self defaultlyPricedTenRoomFloor )
								      	 with: (Floor floorWithRoomAmount: 1 andPrices: self defaultPriceList )! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50529056!
test09HotelCannotReserveANonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel reserveRoom: 42 atFloor: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]
! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50529082!
test10HotelCannotReserveANonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel reserveRoom: 1 atFloor: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel floorNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50529127!
test12HotelCannotReceiveAtNonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel receive: self guestTypeVacation atFloor: 42 atRoom: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel floorNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50528983!
test08HotelLossesAreTheSumOfEachFloorLosses
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new setFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	hotel reserveRoom: 4 atFloor: 1.
	hotel reserveRoom: 2 atFloor: 2.

	self assert: floor1 totalLosses + floor2 totalLosses equals:		hotel totalLosses.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50529317!
test08HotelLossesAreTheSumOfEachFloorLosses
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new setFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	hotel reserveRoom: 4 atFloor: 1.
	hotel reserveRoom: 2 atFloor: 2.

	self assert: floor1 totalLosses + floor2 totalLosses equals:		hotel totalLosses.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 17:59:30' prior: 50529104!
test11HotelCannotReceiveAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self 
	should: [ 	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 17:59:37'!
PASSED!

!methodRemoval: HotelTest #createFloorWith:and: stamp: 'ap 4/29/2024 17:59:47'!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new.
	floor setNumberOfRooms: aNumberOfRooms.
	floor setPrices: aPrice.
	
	^ floor.!

Object subclass: #Guest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Guest category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:01:27'!
Object subclass: #Guest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Guest subclass: #noGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Guest subclass: #NoGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #NoGuest category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:01:47'!
Guest subclass: #NoGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Guest subclass: #ActualGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #ActualGuest category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:02:05'!
Guest subclass: #ActualGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

ActualGuest subclass: #VacationGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #VacationGuest category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:02:23'!
ActualGuest subclass: #VacationGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

ActualGuest subclass: #ConferenceGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #ConferenceGuest category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:02:28'!
ActualGuest subclass: #ConferenceGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room class methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:04:41'!
empty
	self new initializeWithGuest: NoGuest new! !
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:05:32'!
initializeWithGuest: aGuest
	guest := aGuest.! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:25' prior: 50527278!
test01NewRoomsAreAvailable

	| room |
	
	room := Room empty.

	self assert: room isAvailable.
	
	self deny: room isOccupied.
	self deny: room isReserved.! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:30' prior: 50527285!
test02ReceivingAGuestMakesTheRoomOccupied

	| room |
	
	room := Room empty.

	room receive: self guestTypeVacation.

	self assert: room isOccupied.

	self deny: room isAvailable.
	self deny: room isReserved.! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:35' prior: 50527294!
test03ReservingARoomMakesTheRoomReservedAndOccupied

	| room |
	
	room := Room empty.

	room reserve.

	self assert: room isReserved.
	self assert: room isOccupied.

	self deny: room isAvailable.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:39' prior: 50527303!
test04CannotReceiveAGuestInAOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: self guestTypeVacation.
	
	self 
		should: [ room receive: self guestTypeVacation ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.

			self assert: room isOccupied.
			
			self deny: room isAvailable.
			self deny: room isReserved.
		]
	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:42' prior: 50527319!
test05CannotReceiveAGuestInAReservedRoom

	| room |
	
	room := Room empty.

	room reserve.
	
	self 
		should: [ room receive: self guestTypeVacation ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.
			
			self assert: room isReserved.
			self assert: room isOccupied.
			
			self deny: room isAvailable.
		]

	

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:45' prior: 50527335!
test06ReceivingOnReservationMakesTheRoomOccupied

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: self guestTypeVacation.
	
	self assert: room isOccupied.
	
	self deny: room isReserved.
	self deny: room isAvailable.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:49' prior: 50527345!
test07CannotReceiveOnReservationAnAvailableRoom

	| room |
	
	room := Room empty.

	self 
		should: [ room receiveWithReservation: self guestTypeVacation. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.

			self assert: room isAvailable.

			self deny: room isReserved.
			self deny: room isOccupied.
		]

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:51' prior: 50527361!
test08CannotReceiveOnReservationAnOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: self guestTypeVacation.

	self 
		should: [ room receiveWithReservation: self guestTypeVacation. ] 
		raise: Error - MessageNotUnderstood 	
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.
			
			self assert: room isOccupied.

			self deny: room isReserved.
			self deny: room isAvailable.
		]

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:55' prior: 50527378!
test09ProfitOfAvailableRoomIsCeroPesos

	| room |
	
	room := Room empty.

	self assert: 0*peso equals: (room profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:06:57' prior: 50527386!
test10ProfitOfReservedRoomIsHalfTheMinPriceInList

	| room |
	
	room := Room empty.

	room reserve.

	self assert: self minPriceInList / 2 equals: (room profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:02' prior: 50527396!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty.
	roomWithConferenceGuest receive: self guestTypeConference.
	
	roomWithVacationGuest := Room new.
	roomWithVacationGuest receive: self guestTypeVacation.

	self assert: (self defaultPriceList at: self guestTypeConference) 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

	self assert: (self defaultPriceList at: self guestTypeVacation) 
		equals: (roomWithVacationGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:05' prior: 50529627!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty.
	roomWithConferenceGuest receive: self guestTypeConference.
	
	roomWithVacationGuest := Room empty.
	roomWithVacationGuest receive: self guestTypeVacation.

	self assert: (self defaultPriceList at: self guestTypeConference) 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

	self assert: (self defaultPriceList at: self guestTypeVacation) 
		equals: (roomWithVacationGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:08' prior: 50527418!
test12NoProfitOnOccupiedRoomByUnknownGuestType

	| room |
	
	room := Room empty.
	room receive: #unknownGuest.
	
	room profitUsing: self defaultPriceList ifAbsentGuestType: [ ^self ].
	
	"we should not get here"
	self failWith: 'should not calculate profit on room occupied by unknown guest type'.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:12' prior: 50527430!
test13LossesOfAvailableRoomIsHalfTheMaxPriceInList

	self shouldFail: [
		| room |
	
		room := Room empty.

		self assert: self maxPriceInList equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	]	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:15' prior: 50527440!
test14LossesOfReservedRoomIsCeroPesos

	self shouldFail: [
		| room |
	
		room := Room empty.

		room reserve.

		self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	]	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:18' prior: 50527449!
test15LossesOfOccupiedRoomIsCeroPesos

	self shouldFail: [
		| room |
		
		room := Room empty.

		room receive: self guestTypeVacation.

		self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	]! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:21' prior: 50527459!
test16CannotReserveWhenReserved

	| room |
	
	room := Room empty.

	room reserve.

	self 
		should: [ room reserve ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room roomIsNotEmptyErrorDescription equals: anError messageText.
			self assert: room isReserved ].! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:07:26' prior: 50527471!
test17CannotReserveWhenOccupied

	| room |
	
	room := Room empty.

	room receive: self guestTypeVacation.

	self 
		should: [ room reserve ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room roomIsNotEmptyErrorDescription equals: anError messageText.
			self assert: room isOccupied ].! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:07:38' prior: 50527864!
guestType

	^ guest class! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:08:13' prior: 50527891!
isAvailable

	^ guest isKindOf: ActualGuest.! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:08:51' prior: 50529746!
isAvailable

	^ (guest isKindOf: ActualGuest) not.! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:09:32' prior: 50529750!
isAvailable

	^ guest isKindOf: NoGuest! !

Object subclass: #Room
	instanceVariableNames: 'guest reserved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:10:16'!
Object subclass: #Room
	instanceVariableNames: 'guest reserved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:10:40' prior: 50529499!
initializeWithGuest: aGuest
	guest := aGuest.
	reserved := false.! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:11:00' prior: 50529755!
isAvailable

	^ (guest isKindOf: NoGuest) and: reserved not.! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:12:05' prior: 50527894!
isOccupied

	^ self isReserved or: (guest isKindOf: ActualGuest) 
! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:12:27' prior: 50529776!
isAvailable

	^ (guest isKindOf: NoGuest) and: self isReserved not.! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:12:39' prior: 50527898!
isReserved

	^ reserved! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:15:26' prior: 50527867!
receive: aGuestType

	"Room Occupied"
	self isOccupied		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuestType ] ! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:15:33' prior: 50529795!
receive: aGuestType

	"Room Occupied"
	self isOccupied
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuestType ] ! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:16:08' prior: 50529803!
receive: aGuestType

	"Room Occupied"
	self isOccupied
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuestType ] ! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:16:17' prior: 50529811!
receive: aGuest

	"Room Occupied"
	self isOccupied
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuest] ! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:16:32' prior: 50527875!
receiveWithReservation: aGuestType
	
	"Room Reserved"
	self isReserved 
		ifTrue: [  guest := aGuestType ] 
		ifFalse: [ self error: self class roomIsNotReservedErrorDescription ]
! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:16:38' prior: 50529827!
receiveWithReservation: aGuest
	
	"Room Reserved"
	self isReserved 
		ifTrue: [  guest := aGuest ] 
		ifFalse: [ self error: self class roomIsNotReservedErrorDescription ]
! !
!RoomTest methodsFor: 'create' stamp: 'ap 4/29/2024 18:17:57' prior: 50527492!
guestTypeConference
	
	^ ConferenceGuest new.! !
!RoomTest methodsFor: 'create' stamp: 'ap 4/29/2024 18:18:08' prior: 50527496!
guestTypeVacation
	
	^ VacationGuest new! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:18:27'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:18:27'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:18:27'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:18:27'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:18:31'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:19:15' prior: 50529495!
empty
	^self new initializeWithGuest: NoGuest new! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:19:22'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:19:27'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:19:27'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:19:27'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:19:27'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:19:27'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:19:27'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:19:27'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:19:27'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:19:32'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:19:32'!
ERROR!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:20:05' prior: 50527883!
reserve

	"Room Occupied"
	self isOccupied 
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  	guest := #reserved ]! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:20:24' prior: 50529980!
reserve

	"Room Occupied"
	self isOccupied 
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  	reserved := true ]! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:20:42' prior: 50529836!
receiveWithReservation: aGuest
	
	"Room Reserved"
	self isReserved 
		ifTrue: [  guest := aGuest. reserved := false ] 
		ifFalse: [ self error: self class roomIsNotReservedErrorDescription ]
! !

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:20:48'!
FAILURE!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:21:29' prior: 50529988!
reserve

	"Room Occupied"
	self isOccupied 
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  	reserved := true ].! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:21:34' prior: 50530008!
reserve

	self isOccupied 
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  	reserved := true ].! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:22:00' prior: 50529781!
isOccupied

	^ self isReserved or: (guest isKindOf: ActualGuest).
! !

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:22:15'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:22:19'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:22:19'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:22:19'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:22:19'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:22:24'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:22:24'!
FAILURE!
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 18:23:53' prior: 50527902!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	self isAvailable ifTrue: [ ^ 0*peso ].

	
	self isReserved ifTrue: [ ^ aPriceList values min / 2 ].
	
	
	self isOccupied ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:24:07'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:24:07'!
FAILURE!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:24:07'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:24:07'!
PASSED!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:25:07' prior: 50529819!
receive: aGuest

	self isOccupied
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuest] ! !

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:25:20'!
ERROR!
!RoomTest methodsFor: 'create' stamp: 'ap 4/29/2024 18:25:59' prior: 50529844!
guestTypeConference
	
	^ ConferenceGuest.! !
!RoomTest methodsFor: 'create' stamp: 'ap 4/29/2024 18:26:04' prior: 50529848!
guestTypeVacation
	
	^ VacationGuest! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 18:26:21' prior: 50530094!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	self isAvailable ifTrue: [ ^ 0*peso ].

	
	self isReserved ifTrue: [ ^ aPriceList values min / 2 ].
	
	
	self isOccupied ifTrue: [ ^ aPriceList at: guest class ifAbsent: unknownGuestTypeBlock ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:26:24'!
FAILURE!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:26:24'!
FAILURE!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:26:24'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:26:24'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:26:24'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:26:24'!
FAILURE!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:26:24'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:26:24'!
FAILURE!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:27:16' prior: 50529512!
test02ReceivingAGuestMakesTheRoomOccupied

	| room |
	
	room := Room empty.

	room receive: VacationGuest new.

	self assert: room isOccupied.

	self deny: room isAvailable.
	self deny: room isReserved.! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:27:36' prior: 50529531!
test04CannotReceiveAGuestInAOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: VacationGuest new.
	
	self 
		should: [ room receive: self guestTypeVacation ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.

			self assert: room isOccupied.
			
			self deny: room isAvailable.
			self deny: room isReserved.
		]
	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:27:41' prior: 50530255!
test04CannotReceiveAGuestInAOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: VacationGuest new.
	
	self 
		should: [ room receive: VacationGuest new ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.

			self assert: room isOccupied.
			
			self deny: room isAvailable.
			self deny: room isReserved.
		]
	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:27:49' prior: 50529548!
test05CannotReceiveAGuestInAReservedRoom

	| room |
	
	room := Room empty.

	room reserve.
	
	self 
		should: [ room receive: VacationGuest new ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.
			
			self assert: room isReserved.
			self assert: room isOccupied.
			
			self deny: room isAvailable.
		]

	

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:27:58' prior: 50529564!
test06ReceivingOnReservationMakesTheRoomOccupied

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: VacationGuest new.
	
	self assert: room isOccupied.
	
	self deny: room isReserved.
	self deny: room isAvailable.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:28:05' prior: 50529575!
test07CannotReceiveOnReservationAnAvailableRoom

	| room |
	
	room := Room empty.

	self 
		should: [ room receiveWithReservation: VacationGuest new ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.

			self assert: room isAvailable.

			self deny: room isReserved.
			self deny: room isOccupied.
		]

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:28:10' prior: 50529591!
test08CannotReceiveOnReservationAnOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: VacationGuest new.

	self 
		should: [ room receiveWithReservation: self guestTypeVacation. ] 
		raise: Error - MessageNotUnderstood 	
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.
			
			self assert: room isOccupied.

			self deny: room isReserved.
			self deny: room isAvailable.
		]

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:28:14' prior: 50530330!
test08CannotReceiveOnReservationAnOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: VacationGuest new.

	self 
		should: [ room receiveWithReservation: VacationGuest new ] 
		raise: Error - MessageNotUnderstood 	
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.
			
			self assert: room isOccupied.

			self deny: room isReserved.
			self deny: room isAvailable.
		]

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:28:36' prior: 50529650!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty.
	roomWithConferenceGuest receive: self guestTypeConference.
	
	roomWithVacationGuest := Room empty.
	roomWithVacationGuest receive: VacationGuest new.

	self assert: (self defaultPriceList at: self guestTypeConference) 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

	self assert: (self defaultPriceList at: self guestTypeVacation) 
		equals: (roomWithVacationGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:28:50' prior: 50530364!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty.
	roomWithConferenceGuest receive: ConferenceGuest new.
	
	roomWithVacationGuest := Room empty.
	roomWithVacationGuest receive: VacationGuest new.

	self assert: (self defaultPriceList at: self guestTypeConference) 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

	self assert: (self defaultPriceList at: self guestTypeVacation) 
		equals: (roomWithVacationGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:31:27'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:31:27'!
FAILURE!

ActualGuest subclass: #UnknownGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #UnknownGuest category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:32:25'!
ActualGuest subclass: #UnknownGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classRemoval: #UnknownGuest stamp: 'ap 4/29/2024 18:32:50'!
ActualGuest subclass: #UnknownGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 18:34:16' prior: 50529673!
test12NoProfitOnOccupiedRoomByUnknownGuestType

	| room |
	
	room := Room empty.
	room receive: #unknownGuest.
	
	room profitUsing: self defaultPriceList ifAbsentGuestType: [ ^self ].
	
	self failWith: 'should not calculate profit on room occupied by unknown guest type'.
! !

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:34:21'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:34:21'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:36:25' prior: 50530023!
isOccupied

	^ self isAvailable not.
! !

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:36:30'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:36:33'!
PASSED!

Object subclass: #RoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #RoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:37:53'!
Object subclass: #RoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

RoomStatus subclass: #ReservedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #ReservedRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:38:14'!
RoomStatus subclass: #ReservedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

RoomStatus subclass: #OccupiedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #OccupiedRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:39:39'!
RoomStatus subclass: #OccupiedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

RoomStatus subclass: #AvailableRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #AvailableRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:39:56'!
RoomStatus subclass: #AvailableRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #AvailableRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:41:08'!
RoomStatus subclass: #AvailableRoomStatus
	instanceVariableNames: 'room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!AvailableRoomStatus methodsFor: 'nil' stamp: 'ap 4/29/2024 18:41:07'!
reserve 
	room reserveWhenAvailable.! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:41:23'!
reserveWhenAvailable

	reserved := true.! !

!classDefinition: #AvailableRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:41:37'!
RoomStatus subclass: #AvailableRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #RoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:41:37'!
Object subclass: #RoomStatus
	instanceVariableNames: 'room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:42:09'!
reserveWhenUnavailable

	self error: self class roomIsNotEmptyErrorDescription! !
!OccupiedRoomStatus methodsFor: 'nil' stamp: 'ap 4/29/2024 18:42:14'!
reserve 
	room reserveWhenUnavailable.! !
!ReservedRoomStatus methodsFor: 'nil' stamp: 'ap 4/29/2024 18:42:21'!
reserve 
	room reserveWhenUnavailable.! !

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:42:45'!
Object subclass: #Room
	instanceVariableNames: 'guest reserved state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:42:43' prior: 50530016!
reserve

	state reserve.! !
!RoomStatus methodsFor: 'nil' stamp: 'ap 4/29/2024 18:44:10'!
of: aRoom
	room := aRoom.! !
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:44:12' prior: 50529771!
initializeWithGuest: aGuest
	guest := aGuest.
	reserved := false.
	state := OccupiedRoomStatus of: self! !
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:44:35'!
initializeWithoutGuest
	guest := NoGuest new.
	reserved := false.
	state := OccupiedRoomStatus of: self! !
!Room class methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:45:16' prior: 50529910!
empty
	^self new initializeWithoutGuest ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:45:20'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:45:20'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:45:20'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:45:20'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:45:28'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:45:28'!
ERROR!
!RoomStatus class methodsFor: 'nil' stamp: 'ap 4/29/2024 18:46:21'!
of: aRoom
	^self new with: aRoom! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:46:57'!
with: aRoom
	room := aRoom.! !

!methodRemoval: RoomStatus #of: stamp: 'ap 4/29/2024 18:47:00'!
of: aRoom
	room := aRoom.!
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:47:11'!
reserve

	self subclassResponsibility! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:47:19'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:47:19'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:47:19'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:47:19'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:47:19'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:47:19'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:47:24'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:47:24'!
ERROR!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:48:25' prior: 50530578!
reserveWhenAvailable

	state := ReservedRoomStatus of: self.! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:49:23' prior: 50529786!
isAvailable

	^ state isAvailable! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:49:32'!
isAvailable
	^true! !
!OccupiedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:49:42'!
isAvailable
	^false! !
!OccupiedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:49:50'!
isOccupied
	^true! !
!OccupiedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:50:00'!
isReserved
	^false! !

!methodRemoval: OccupiedRoomStatus #isReserved stamp: 'ap 4/29/2024 18:50:17'!
isReserved
	^false!

!methodRemoval: OccupiedRoomStatus #isAvailable stamp: 'ap 4/29/2024 18:50:21'!
isAvailable
	^false!
!ReservedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:50:35'!
isReserved
	^true! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:50:44'!
isReserved
	^false! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:50:51'!
isAvailable
	^false! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:50:56'!
isOccupied
	^false! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:51:14' prior: 50530453!
isOccupied

	^ state isOccupied 
! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 18:51:20' prior: 50529791!
isReserved

	^ state isReserved ! !

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:51:40'!
Object subclass: #Room
	instanceVariableNames: 'guest reserved Occupationstate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:51:40' prior: 50530625!
initializeWithGuest: aGuest
	guest := aGuest.
	reserved := false.
	Occupationstate := OccupiedRoomStatus of: self! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:51:40' prior: 50530618!
reserve

	Occupationstate reserve.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:51:40' prior: 50530830!
isReserved

	^ Occupationstate isReserved ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:51:40' prior: 50530784!
isAvailable

	^ Occupationstate isAvailable! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:51:40' prior: 50530631!
initializeWithoutGuest
	guest := NoGuest new.
	reserved := false.
	Occupationstate := OccupiedRoomStatus of: self! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:51:40' prior: 50530826!
isOccupied

	^ Occupationstate isOccupied 
! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:51:40' prior: 50530779!
reserveWhenAvailable

	Occupationstate := ReservedRoomStatus of: self.! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:52:01'!
FAILURE!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:52:01'!
FAILURE!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:52:01'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:52:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:52:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:52:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:52:01'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:52:16'!
FAILURE!
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 18:52:30' prior: 50530863!
initializeWithoutGuest
	guest := NoGuest new.
	reserved := false.
	Occupationstate := AvailableRoomStatus of: self! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:52:35'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:52:35'!
FAILURE!

Object subclass: #Room
	instanceVariableNames: 'guest reserved occupationstate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:53:32'!
Object subclass: #Room
	instanceVariableNames: 'guest reserved occupationstate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Object subclass: #Room
	instanceVariableNames: 'guest reserved occupationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:53:37'!
Object subclass: #Room
	instanceVariableNames: 'guest reserved occupationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:53:53' prior: 50530160!
receive: aGuest

	self isOccupied
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuest.
				occupationState := OccupiedRoomStatus of: self] ! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 18:54:16' prior: 50529995!
receiveWithReservation: aGuest
	
	"Room Reserved"
	self isReserved 
		ifTrue: [  guest := aGuest. occupationState := OccupiedRoomStatus of: self ]
		ifFalse: [ self error: self class roomIsNotReservedErrorDescription ]
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:54:21'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:54:21'!
FAILURE!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:54:45'!
FAILURE!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:54:45'!
FAILURE!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:54:55'!
FAILURE!

Object subclass: #Room
	instanceVariableNames: 'guest reserved Occupationstate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:55:19'!
Object subclass: #Room
	instanceVariableNames: 'guest reserved Occupationstate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 18:55:32'!
Object subclass: #Room
	instanceVariableNames: 'guest reserved occupationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:55:32' prior: 50530842!
initializeWithGuest: aGuest
	guest := aGuest.
	reserved := false.
	occupationState := OccupiedRoomStatus of: self! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:55:32' prior: 50530849!
reserve

	occupationState reserve.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:55:32' prior: 50530853!
isReserved

	^ occupationState isReserved ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:55:32' prior: 50530858!
isAvailable

	^ occupationState isAvailable! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:55:32' prior: 50530938!
initializeWithoutGuest
	guest := NoGuest new.
	reserved := false.
	occupationState := AvailableRoomStatus of: self! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:55:32' prior: 50530870!
isOccupied

	^ occupationState isOccupied 
! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:55:32' prior: 50530875!
reserveWhenAvailable

	occupationState := ReservedRoomStatus of: self.! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:55:36'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:55:36'!
FAILURE!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:55:43'!
FAILURE!

room isOccupied!
!RoomStatus class methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 18:58:44' prior: 50530702!
of: aRoom
	self subclassResponsibility ! !
!AvailableRoomStatus class methodsFor: 'nil' stamp: 'ap 4/29/2024 18:58:48' overrides: 50531230!
of: aRoom
	^self new with: aRoom! !
!OccupiedRoomStatus class methodsFor: 'nil' stamp: 'ap 4/29/2024 18:58:52' overrides: 50531230!
of: aRoom
	^self new with: aRoom! !
!ReservedRoomStatus class methodsFor: 'nil' stamp: 'ap 4/29/2024 18:58:55' overrides: 50531230!
of: aRoom
	^self new with: aRoom! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 18:58:59'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 18:58:59'!
FAILURE!

OccupiedRoomStatus of: self!

occupationState isOccupied !

occupationState!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 19:00:44' prior: 50531026!
receive: aGuest

	self isOccupied
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuest.
				occupationState := OccupiedRoomStatus of: self] ! !

OccupiedRoomStatus of: self!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:00:58'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 19:01:03'!
FAILURE!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:01:03'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:01:03'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:01:03'!
PASSED!

RoomStatus subclass: #UnavailableRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #UnavailableRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 19:01:52'!
RoomStatus subclass: #UnavailableRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

UnavailableRoomStatus subclass: #ReservedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #ReservedRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 19:02:04'!
UnavailableRoomStatus subclass: #ReservedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

UnavailableRoomStatus subclass: #OccupiedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #OccupiedRoomStatus category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 19:02:10'!
UnavailableRoomStatus subclass: #OccupiedRoomStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:03:18' prior: 50529522!
test03ReservingARoomMakesTheRoomReservedAndOccupied

	| room |
	
	room := Room empty.

	room reserve.

	self assert: room isUnavailable.

	self deny: room isAvailable.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:03:32' prior: 50530287!
test05CannotReceiveAGuestInAReservedRoom

	| room |
	
	room := Room empty.

	room reserve.
	
	self 
		should: [ room receive: VacationGuest new ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.
			
			self assert: room isUnavailable.
			
			self deny: room isAvailable.
		]

	

	
! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:04:35'!
isUnavailable
	^false! !
!UnavailableRoomStatus methodsFor: 'nil' stamp: 'ap 4/29/2024 19:04:47' overrides: 50531438!
isUnavailable
	^true! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 19:05:02'!
isUnavailable

	^ occupationState isUnavailable.! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:05:07'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:05:07'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:05:07'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:05:07'!
PASSED!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 19:05:25' prior: 50531307!
receive: aGuest

	self isUnavailable
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuest.
				occupationState := OccupiedRoomStatus of: self] ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:05:32'!
FAILURE!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:05:32'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:05:32'!
FAILURE!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:06:11'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:06:41'!
test03ReservingARoomMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.

	self assert: room isUnavailable.

	self deny: room isAvailable.
! !

!methodRemoval: RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'ap 4/29/2024 19:06:45'!
test03ReservingARoomMakesTheRoomReservedAndOccupied

	| room |
	
	room := Room empty.

	room reserve.

	self assert: room isUnavailable.

	self deny: room isAvailable.
!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 19:06:59'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:07:00'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:07:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:07:03'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 19:07:04'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:07:05'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:07:06'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:07:08'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:07:08'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:07:58'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:07:58'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:08:07'!
FAILURE!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 19:08:31' prior: 50531035!
receiveWithReservation: aGuest
	
	self isReserved 
		ifTrue: [  guest := aGuest. occupationState := OccupiedRoomStatus of: self ]
		ifFalse: [ self error: self class roomIsNotReservedErrorDescription ]
! !

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:08:54'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:08:58'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:08:59'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:09:00'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:09:01'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:09:02'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:09:03'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:09:04'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:09:04'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:09:05'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:09:06'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:09:07'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:09:08'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:09:09'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:09:10'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:09:10'!
PASSED!
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:09:34'!
receiveWithReservation: aGuest
	self subclassResponsibility ! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:10:31' overrides: 50531744!
receiveWithReservation: aGuest
	room receiveWithReservationWhenNotReserved.! !
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 19:10:38'!
receiveWithReservationWhenNotReserved
	! !
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 19:10:52' prior: 50531755!
receiveWithReservationWhenNotReserved
	self error: self class roomIsNotReservedErrorDescription.
	! !
!OccupiedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:11:01' overrides: 50531744!
receiveWithReservation: aGuest
	room receiveWithReservationWhenNotReserved.! !
!ReservedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:11:22' overrides: 50531744!
receiveWithReservation: aGuest
	room receiveWithReservationWhenReserved: aGuest.! !
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 19:11:47'!
receiveWithReservationWhenReserved: aGuest
	guest := aGuest. 
	occupationState := OccupiedRoomStatus of: self
	! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 19:12:02' prior: 50531633!
receiveWithReservation: aGuest
	
	occupationState receiveWithReservation: aGuest ! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:12:22'!
canReceiveWithReservation: aGuest
	self subclassResponsibility ! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:12:22' overrides: 50531789!
canReceiveWithReservation: aGuest
	room receiveWithReservationWhenNotReserved.! !
!OccupiedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:12:22' overrides: 50531789!
canReceiveWithReservation: aGuest
	room receiveWithReservationWhenNotReserved.! !
!ReservedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:12:22' overrides: 50531789!
canReceiveWithReservation: aGuest
	room receiveWithReservationWhenReserved: aGuest.! !

!methodRemoval: RoomStatus #receiveWithReservation: stamp: 'ap 4/29/2024 19:12:22'!
receiveWithReservation: aGuest
	self subclassResponsibility !

!methodRemoval: AvailableRoomStatus #receiveWithReservation: stamp: 'ap 4/29/2024 19:12:22'!
receiveWithReservation: aGuest
	room receiveWithReservationWhenNotReserved.!

!methodRemoval: OccupiedRoomStatus #receiveWithReservation: stamp: 'ap 4/29/2024 19:12:22'!
receiveWithReservation: aGuest
	room receiveWithReservationWhenNotReserved.!

!methodRemoval: ReservedRoomStatus #receiveWithReservation: stamp: 'ap 4/29/2024 19:12:22'!
receiveWithReservation: aGuest
	room receiveWithReservationWhenReserved: aGuest.!
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 19:12:39' prior: 50531783!
receiveWithReservation: aGuest
	
	occupationState canReceiveWithReservation: aGuest ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:12:46'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:12:46'!
PASSED!
!UnavailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:13:37'!
receive: aGuest
	room receiveWhenUnavailable. ! !
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 19:14:00'!
receiveWhenUnavailable
	 self error: self class roomIsNotEmptyErrorDescription ! !
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 19:14:22'!
receiveWhenAvailable: aGuest
	guest := aGuest.
	occupationState := OccupiedRoomStatus of: self! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 19:14:41' prior: 50531505!
receive: aGuest

	occupationState receive: aGuest ! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:15:13'!
receive: aGuest
	room receiveWhenAvailable: aGuest . ! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:15:18'!
receive: aGuest

	self subclassResponsibility! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:15:34'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:15:34'!
PASSED!
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:17:18'!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	self subclassResponsibility ! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:17:55'!
profitWhenAvailable

	^ 0*peso! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:17:55' prior: 50530179!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	self isAvailable ifTrue: [ ^ self profitWhenAvailable ].

	
	self isReserved ifTrue: [ ^ aPriceList values min / 2 ].
	
	
	self isOccupied ifTrue: [ ^ aPriceList at: guest class ifAbsent: unknownGuestTypeBlock ].
	
	! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:18:28'!
profitWhenReservedWith: aPriceList

	^ aPriceList values min / 2! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:18:28' prior: 50531989!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	self isAvailable ifTrue: [ ^ self profitWhenAvailable ].

	
	self isReserved ifTrue: [ ^ self profitWhenReservedWith: aPriceList ].
	
	
	self isOccupied ifTrue: [ ^ aPriceList at: guest class ifAbsent: unknownGuestTypeBlock ].
	
	! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:19:12'!
profitWhenOccupiedUsing: unknownGuestTypeBlock ifAbsentGuessType: aPriceList

	^ aPriceList at: guest class ifAbsent: unknownGuestTypeBlock! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:19:12' prior: 50532005!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	self isAvailable ifTrue: [ ^ self profitWhenAvailable ].

	
	self isReserved ifTrue: [ ^ self profitWhenReservedWith: aPriceList ].
	
	
	self isOccupied ifTrue: [ ^ self profitWhenOccupiedUsing: unknownGuestTypeBlock ifAbsentGuessType: aPriceList ].
	
	! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:19:36' overrides: 50531979!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	^room profitWhenAvailable ! !
!OccupiedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:20:01' overrides: 50531979!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	^room profitWhenOccupiedUsing: aPriceList ifAbsentGuessType: unknownGuestTypeBlock.! !
!ReservedRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 19:20:34' overrides: 50531979!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	^room profitWhenReservedWith: aPriceList! !
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:21:08' prior: 50532024!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	occupationState profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	! !

----End fileIn of /home/Estudiante/Documentos/agus/linux64/linux64/Packages/TerseGuide.pck.st----!
!Hotel methodsFor: 'testing' stamp: 'ap 4/29/2024 19:26:32' prior: 50527757!
isEmpty

	floors collect: [:aFloor | aFloor isEmpty ifFalse: [^false]].
	^true.! !
!Floor methodsFor: 'accessing' stamp: 'ap 4/29/2024 19:28:17'!
isEmpty
	rooms collect: [:aRoom | aRoom isAvailable ifFalse: [^false]].
	^true! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:28:25'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:28:25'!
ERROR!

hotel isEmpty.!
!Floor methodsFor: 'accessing' stamp: 'ap 4/29/2024 19:29:24' prior: 50534992!
isEmpty
	rooms collect: [:aRoom | aRoom isAvailable ifFalse: [^false]].
	^true! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:29:32'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:29:32'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:29:32'!
ERROR!
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 19:30:08' prior: 50529243!
defaultFloors

	^ OrderedCollection with: (self defaultlyPricedTenRoomFloor )
					     with: (Floor floorWithRoomAmount: 1 andPrices: self defaultPriceList )! !
!Floor methodsFor: 'initialization' stamp: 'ap 4/29/2024 19:30:58' prior: 50528018!
initializeRoomsWith: aNumberOfRooms

	rooms := OrderedCollection new.
	aNumberOfRooms timesRepeat: [rooms add: Room empty.]
	
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:31:03'!
FAILURE!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:31:03'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:31:03'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:31:03'!
FAILURE!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:31:09'!
FAILURE!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:31:09'!
FAILURE!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:32:18' prior: 50528548!
test04HotelCanTakeAReservationForARoomAtFloor

	| hotel |
	
	hotel := Hotel withFloors: self defaultFloors .

	self assert: hotel totalRooms equals: hotel	 totalRoomsAvailable.

	hotel reserveRoom: 2 atFloor: 1.

	self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
	self assert: 1 equals: hotel totalRoomsReserved.
	self assert: 1 equals: hotel totalRoomsUnavailable.! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 19:32:36'!
totalRoomsUnavailable

	^ availableRoomsCount.
! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 19:33:13' prior: 50535172!
totalRoomsUnavailable
	^floors inject: 0 into: [:roomsOcupiedUntilThisFloor :thisFloor | roomsOcupiedUntilThisFloor + 
		(thisFloor rooms count: [:room | room isUnavailable]).
		].

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:33:47'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:33:47'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:33:47'!
FAILURE!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:34:24' prior: 50529200!
test07HotelProfitsAreTheSumOfEachFloorProfits
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel withFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	self assert: floor1 totalProfits + floor2 totalProfits equals:		hotel totalProfits.! !

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:34:27'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:34:27'!
ERROR!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:34:37'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:34:37'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:34:37'!
FAILURE!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:34:51'!
ERROR!
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 19:36:33' prior: 50527251!
guestTypeConference
	
	^ ConferenceGuest ! !
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 19:36:39' prior: 50527255!
guestTypeVacation
	
	^ VacationGuest ! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:36:43'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:36:43'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:36:43'!
FAILURE!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:37:16'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:37:16'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:37:16'!
FAILURE!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:37:28'!
ERROR!
!Floor methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:39:00' prior: 50527534!
totalProfits

	^rooms sum: [	:room | room profitUsing: prices ifAbsentGuestType: [ self class signalUnknownGuestType ]]

	
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:39:07'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:39:07'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:39:07'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:39:07'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:39:07'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:39:07'!
FAILURE!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 19:39:07'!
FAILURE!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:39:07'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 19:39:07'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:39:16'!
FAILURE!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:39:16'!
FAILURE!
!Floor methodsFor: 'totals' stamp: 'ap 4/29/2024 19:40:00'!
totalRoomsUnavailable
	
	^rooms count: [ :room | room isUnavailable ]
		
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:40:30' prior: 50528264!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied equals: floor totalRoomsOccupied + 1.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:40:48'!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied equals: floor totalRoomsOccupied + 1.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:41:18'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:41:19'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:41:21'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:41:22'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:41:23'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:41:24'!
FAILURE!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:41:24'!
FAILURE!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:42:18' prior: 50535459!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:42:20'!
FAILURE!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 19:42:20'!
FAILURE!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:42:20'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 19:42:20'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:42:24'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:42:41'!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsInreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!methodRemoval: FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:42:41'!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:42:50' prior: 50535484!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!methodRemoval: FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsInreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:43:00'!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsInreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:43:03'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:43:03'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:43:03'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:43:03'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:43:03'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:43:03'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 19:43:03'!
FAILURE!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:43:03'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 19:43:03'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:43:24'!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne

	| floor  |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:43:46' prior: 50535757!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne

	| floor  |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 0 equals: floor totalRoomsOccupied.
	self assert: 1 equals: floor totalRoomsReserved.
! !

!methodRemoval: FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'ap 4/29/2024 19:43:52'!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne

	| floor  |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 1 equals: floor totalRoomsReserved.
!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:43:55'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 19:43:55'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:43:55'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:44:00'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:44:00'!
ERROR!
!FloorTest methodsFor: 'create' stamp: 'ap 4/29/2024 19:44:22' prior: 50526974!
guestTypeVacation
	
	^ VacationGuest ! !
!FloorTest methodsFor: 'create' stamp: 'ap 4/29/2024 19:44:31' prior: 50526970!
guestTypeConference
	
	^ ConferenceGuest ! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:45:14' prior: 50530271!
test04CannotReceiveAGuestInAOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: VacationGuest new.
	
	self 
		should: [ room receive: self guestTypeVacation new ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.

			self assert: room isOccupied.
			
			self deny: room isAvailable.
			self deny: room isReserved.
		]
	
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:45:19' prior: 50528315!
test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation new.
	((floor rooms) at: 2) receive: self guestTypeConference new.
	((floor rooms) at: 3) reserve.
		
	self assert: (100*peso) + (200*peso) + (50*peso) equals: floor totalProfits
! !

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:45:22'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:45:22'!
ERROR!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:45:40' prior: 50528243!
test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne

	| floor |
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation new.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 0 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:45:51' prior: 50535668!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation new.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:46:05' prior: 50528330!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation new.
	((floor rooms) at: 2) receive: self guestTypeConference new.
	((floor rooms) at: 3) reserve.
		
	self assert: (200*peso) * 7 equals: floor totalLosses
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:46:08'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:46:09'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:46:10'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:46:11'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:46:12'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:46:13'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 19:46:14'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:46:15'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:46:15'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:47:40'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:47:42'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:47:42'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 19:47:43'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:47:44'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:47:44'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:48:48'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:50:08'!
ERROR!
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 19:50:57' prior: 50532017!
profitWhenOccupiedUsing: aPriceList ifAbsentGuessType: unknownGuestTypeBlock

	^ aPriceList at: guest class ifAbsent: unknownGuestTypeBlock! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:51:01'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 19:51:01'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:51:01'!
ERROR!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:51:24'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:51:25'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:51:26'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:51:27'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:51:27'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:51:28'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 19:51:29'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:51:30'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:51:30'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:51:59'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:53:06'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:53:06'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:53:06'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:53:06'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:53:15'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:53:16'!
FAILURE!
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 19:53:54' prior: 50532060!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	^occupationState profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 19:54:03'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 19:54:07'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:54:11'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:54:11'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:54:11'!
FAILURE!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:54:22'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:54:22'!
ERROR!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:55:02'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:55:02'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:02'!
FAILURE!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:55:12' prior: 50535229!
test07HotelProfitsAreTheSumOfEachFloorProfits
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel withFloors: floors.
	
	hotel receive: self guestTypeVacation new atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference new atFloor: 2 atRoom: 1.

	self assert: floor1 totalProfits + floor2 totalProfits equals:		hotel totalProfits.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:55:40' prior: 50529218!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation new atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 1 equals: hotel totalRoomsOccupied.
	]! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:55:47'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:47'!
FAILURE!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:47'!
FAILURE!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:55:55'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:55'!
FAILURE!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:55:55'!
FAILURE!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 19:56:02'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 19:56:03'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:56:04'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 19:56:05'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 19:56:06'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 19:56:07'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 19:56:08'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 19:56:09'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 19:56:10'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 19:56:11'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 19:56:12'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 19:56:13'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:56:14'!
FAILURE!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:56:14'!
FAILURE!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:57:20' prior: 50536382!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation new atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 19:57:23'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 19:59:24' prior: 50536551!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation new atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!Floor methodsFor: 'accessing' stamp: 'ap 4/29/2024 20:00:48' overrides: 16913501!
size
	^ rooms size! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 20:00:54' prior: 50528849!
totalRooms

	^ floors sum: [:aFloor | aFloor size].

! !
!Floor methodsFor: 'accessing' stamp: 'ap 4/29/2024 20:01:45' prior: 50527574!
totalRoomsOccupied
	^ rooms count: [:room | room isOccupied]! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 20:02:34' prior: 50528912!
totalRoomsOccupied
	^floors sum: [:thisFloor |
		(thisFloor totalRoomsOccupied).
		].


! !
!Floor methodsFor: 'accessing' stamp: 'ap 4/29/2024 20:02:50' prior: 50527579!
totalRoomsReserved
	^ rooms count: [:room | room isReserved]! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 20:03:15' prior: 50528921!
totalRoomsReserved

	^floors inject: 0 into: [:thisFloor | 
		thisFloor totalRoomsReserved.
		].

! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 20:03:24' prior: 50536618!
totalRoomsOccupied
	^floors sum: [:thisFloor |
		thisFloor totalRoomsOccupied.
		].


! !
!Floor methodsFor: 'accessing' stamp: 'ap 4/29/2024 20:04:25' prior: 50535454!
totalRoomsUnavailable
	^ rooms count: [:room | room isUnavailable]! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 20:04:29' prior: 50535176!
totalRoomsUnavailable

	^floors inject: 0 into: [:thisFloor | 
		thisFloor totalRoomsUnavailable.
		].

! !
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:05:52'!
receive: aGuest at: aRoomNumber! !
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:06:25' prior: 50536652!
receive: aGuest at: aRoomNumber
	(rooms at: aRoomNumber) receive: aGuest! !
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:07:12'!
reserveAt: aRoomNumber
	(rooms at: aRoomNumber) reserve.! !
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:08:19'!
receiveAt: aRoomNumber
	(rooms at: aRoomNumber) reserve.! !

!methodRemoval: Floor #receiveAt: stamp: 'ap 4/29/2024 20:08:27'!
receiveAt: aRoomNumber
	(rooms at: aRoomNumber) reserve.!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:08:36' prior: 50535940!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor receive: self guestTypeVacation new at: 1.
	floor receive: self guestTypeConference new at: 2 .
	floor reserveAt: 3.
		
	self assert: (200*peso) * 7 equals: floor totalLosses
! !
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:10:29'!
atRoom: aRoomNumber ifAbsent: aBlock! !
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:10:59' prior: 50536687!
atRoom: aRoomNumber ifAbsent: aBlock
	^rooms at: aRoomNumber ifAbsent: aBlock.! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 20:11:10' prior: 50527795!
reserveRoom: aRoomNumber atFloor: aFloorNumber

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor atRoom: aRoomNumber ifAbsent: [ self class signalRoomNumberDoesNotExist ].
	 
	room reserve.
	
	availableRoomsCount := availableRoomsCount - 1.
! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 20:11:27' prior: 50527782!
receiveWithReservation: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor atRoom: aRoomNumber ifAbsent: [ self class signalRoomNumberDoesNotExist ].

	room receiveWithReservation: aGuestType.

! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 20:11:37' prior: 50527769!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor atRoom: aRoomNumber ifAbsent: [ self class signalRoomNumberDoesNotExist ].

	room receive: aGuestType.
	
	availableRoomsCount := availableRoomsCount - 1.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:12:02' prior: 50535875!
test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor receive: self guestTypeVacation new at: 1.
	floor receive: self guestTypeConference new at: 2 .
	floor reserveAt: 3.
		
	self assert: (100*peso) + (200*peso) + (50*peso) equals: floor totalProfits
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:12:24' prior: 50535772!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne

	| floor  |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor reserveAt: 1.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 0 equals: floor totalRoomsOccupied.
	self assert: 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:12:36' prior: 50535914!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor reserveAt: 1.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation new.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:13:05' prior: 50535898!
test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne

	| floor |
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor receive: self guestTypeVacation new at: 1.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 0 equals: floor totalRoomsReserved.
! !

!methodRemoval: Floor #rooms stamp: 'ap 4/29/2024 20:13:14'!
rooms

	^ rooms!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:13:45' prior: 50536765!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor reserveAt: 1.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	floor receive: self guestTypeVacation new at: 1.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:13:51'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 20:13:51'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:13:51'!
ERROR!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 20:13:58'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 20:13:59'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:14:00'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 20:14:01'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 20:14:02'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:14:03'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:14:03'!
ERROR!
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:14:24' prior: 50536656!
receive: aGuest at: aRoomNumber
	(rooms at: aRoomNumber) receive: aGuest.! !

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:14:50'!
ERROR!
!Floor methodsFor: 'operate' stamp: 'ap 4/29/2024 20:15:45'!
receiveWithReservation: aGuest at: aRoomNumber
	(rooms at: aRoomNumber) receiveWithReservation: aGuest.! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:15:52' prior: 50536808!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor reserveAt: 1.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	floor receiveWithReservation: self guestTypeVacation new at: 1.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 20:15:55'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 20:15:55'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:15:55'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 20:15:56'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 20:15:56'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:15:56'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 20:15:56'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 20:15:56'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 20:15:56'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:16:00'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:16:00'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:16:00'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:16:00'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:16:00'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 20:16:51'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:16:54'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:16:54'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:16:54'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:16:54'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:16:54'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:18:00'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:18:12'!
ERROR!
!Floor methodsFor: 'totals' stamp: 'ap 4/29/2024 20:18:39' prior: 50536624!
totalRoomsReserved
	
	^rooms count: [ :room | room isReserved ]
		
! !
!Floor methodsFor: 'totals' stamp: 'ap 4/29/2024 20:18:49' prior: 50536613!
totalRoomsOccupied
	
	^rooms count: [ :room | room isOccupied ]
		
! !

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:19:02'!
ERROR!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:19:10'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:19:10'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:19:10'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:19:10'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:19:10'!
ERROR!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:19:29'!
ERROR!
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 20:20:39' prior: 50536629!
totalRoomsReserved

	^floors sum: [:thisFloor | 
		thisFloor totalRoomsReserved.
		].

! !
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 20:20:47' prior: 50536646!
totalRoomsUnavailable

	^floors sum: [:thisFloor | 
		thisFloor totalRoomsUnavailable.
		].

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:20:52'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 20:20:56'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:20:59'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 20:21:11'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 20:21:11'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'ap 4/29/2024 20:23:21'!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock


	^occupationState lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:24:08' prior: 50529685!
test13LossesOfAvailableRoomIsHalfTheMaxPriceInList
		| room |
	
		room := Room empty.

		self assert: self maxPriceInList equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:24:26' prior: 50529695!
test14LossesOfReservedRoomIsCeroPesos

		| room |
	
		room := Room empty.

		room reserve.

		self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:24:54' prior: 50529705!
test15LossesOfOccupiedRoomIsCeroPesos

		| room |
		
		room := Room empty.

		room receive: self guestTypeVacation.

		self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:26:43'!
test13LossesOfAvailableRoomIsTheMaxPriceInList
		| room |
	
		room := Room empty.

		self assert: self maxPriceInList equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	! !

!methodRemoval: RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'ap 4/29/2024 20:26:43'!
test13LossesOfAvailableRoomIsHalfTheMaxPriceInList
		| room |
	
		room := Room empty.

		self assert: self maxPriceInList equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	!
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 20:27:27'!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	^room lossWhenAvailable ! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 20:27:36'!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	self subclassResponsibility ! !
!UnavailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 20:28:43' overrides: 50537443!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	^room lossWhenUnavailable.! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 20:28:53' prior: 50537437 overrides: 50537443!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	^room lossWhenAvailable.! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 20:29:06' prior: 50537457 overrides: 50537443!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock
	^room lossWhenAvailable: aPriceList.! !
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 20:30:04'!
lossWhenAvailable: aPriceList

	^ aPriceList max.! !
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 20:30:47'!
lossWhenUnavailable

	^ 0 * peso.! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 20:30:55'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 20:30:55'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 20:33:57'!
roomAt: aRoomNumber atFloor: aFloorNumber 

	| floor |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	^ floor atRoom: aRoomNumber ifAbsent: [ self class signalRoomNumberDoesNotExist ].

! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 20:34:29' prior: 50536722!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	(self roomAt: aRoomNumber atFloor: aFloorNumber)  receive: aGuestType.
	
	availableRoomsCount := availableRoomsCount - 1.
! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 20:34:52' prior: 50536709!
receiveWithReservation: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	(self roomAt: aRoomNumber atFloor: aFloorNumber) receiveWithReservation: aGuestType.

! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 20:35:05' prior: 50536696!
reserveRoom: aRoomNumber atFloor: aFloorNumber

	(self roomAt: aRoomNumber atFloor: aFloorNumber) reserve.
	
	availableRoomsCount := availableRoomsCount - 1.
! !
!Hotel methodsFor: 'accounting' stamp: 'ap 4/29/2024 20:36:36' prior: 50527692!
totalLosses

	^floors sum: [:aFloor | aFloor totalLosses]. 

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:36:38'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:36:38'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:36:38'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:36:38'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:36:38'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:36:39'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:36:39'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:36:39'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:36:39'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:36:39'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:36:39'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:36:39'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:36:39'!
PASSED!
!Hotel methodsFor: 'accounting' stamp: 'ap 4/29/2024 20:36:54' prior: 50527698!
totalProfits

	^floors sum: [:aFloor | aFloor totalProfits]. 
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:36:58'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 20:37:01'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 20:37:05'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 20:37:05'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:39:29'!
creatingFloorWithRooms

	^ self
		should: [Floor floorWithRoomAmount: 0 andPrices: self defaultPriceList ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Floor numberOfRoomsMustBePositiveErrorDescription! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:39:29' prior: 50528070!
test01CannotCreateFloorWithoutRooms

	self creatingFloorWithRooms ! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:40:10'!
creatingFloorWithRooms: roomAmount shouldFailWith: errorMessage

	^ self
		should: [Floor floorWithRoomAmount: roomAmount andPrices: self defaultPriceList ]
		raise: Error - MessageNotUnderstood 
		withMessageText: errorMessage! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:41:04' prior: 50537766!
test01CannotCreateFloorWithoutRooms

	self creatingFloorWithRooms: 0 shouldFailWith: Floor numberOfRoomsMustBePositiveErrorDescription.! !

!methodRemoval: FloorTest #creatingFloorWithRooms stamp: 'ap 4/29/2024 20:41:11'!
creatingFloorWithRooms

	^ self
		should: [Floor floorWithRoomAmount: 0 andPrices: self defaultPriceList ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Floor numberOfRoomsMustBePositiveErrorDescription!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:41:45' prior: 50528184!
test02CannotCreateFloorWithNoIntergerNumberOfRooms
	self creatingFloorWithRooms: 1.5 shouldFailWith: Floor numberOfRoomsMustBeIntegerErrorDescription .
	! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:42:21'!
creatingFloorWithRooms: roomAmount andPrices: aPriceList shouldFailWith: errorMessage

	^ self
		should: [Floor floorWithRoomAmount: roomAmount andPrices: self defaultPriceList ]
		raise: Error - MessageNotUnderstood 
		withMessageText: errorMessage! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:43:06' prior: 50528215!
test03CannotCreateFloorWithoutPrices

	self creatingFloorWithRooms: 10 andPrices: Dictionary new shouldFailWith: Floor pricesListCannotBeEmptyErrorDescription.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 20:43:08'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 20:43:09'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:43:11'!
FAILURE!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:43:11'!
FAILURE!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:43:57'!
FAILURE!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 20:43:57'!
FAILURE!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:44:31' prior: 50537805!
creatingFloorWithRooms: roomAmount andPrices: aPriceList shouldFailWith: errorMessage

	^ self
		should: [Floor floorWithRoomAmount: roomAmount andPrices: aPriceList ]
		raise: Error - MessageNotUnderstood 
		withMessageText: errorMessage! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:45:01' prior: 50537771!
creatingFloorWithRooms: roomAmount shouldFailWith: errorMessage
	^self creatingFloorWithRooms: roomAmount andPrices: self defaultPriceList shouldFailWith: errorMessage
	! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:46:59' prior: 50536750!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne

	| floor  |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor reserveAt: 1.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsUnavailable. "Occupied here meant Unavailable, it was ambiguous"
	self assert: 1 equals: floor totalRoomsReserved.
! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:48:51' prior: 50535157!
test04HotelCanTakeAReservationForARoomAtFloor

	| hotel |
	
	hotel := Hotel withFloors: self defaultFloors .

	self assert: hotel totalRooms equals: hotel	 totalRoomsAvailable.

	hotel reserveRoom: 2 atFloor: 1.

	self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
	self assert: 1 equals: hotel totalRoomsReserved.
	self assert: 1 equals: hotel totalRoomsUnavailable. "Occupied here meant Unavailable, it was ambiguous"! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 20:49:29'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 20:49:35'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 20:49:35'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:49:52' prior: 50531576!
test03ReservingARoomMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.

	self assert: room isUnavailable. "Occupied here meant Unavailable, it was ambiguous"

	self deny: room isAvailable.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:50:37'!
test06ReceivingOnReservationMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: VacationGuest new.
	
	self assert: room isOccupied.
	
	self deny: room isReserved.
	self deny: room isAvailable.
! !

!methodRemoval: RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:50:37'!
test06ReceivingOnReservationMakesTheRoomOccupied

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: VacationGuest new.
	
	self assert: room isOccupied.
	
	self deny: room isReserved.
	self deny: room isAvailable.
!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:50:47' prior: 50538003!
test06ReceivingOnReservationMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: VacationGuest new.
	
	self assert: room isUnavailable.
	
	self deny: room isReserved.
	self deny: room isAvailable.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:50:53' prior: 50538025!
test06ReceivingOnReservationMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: VacationGuest new.
	
	self assert: room isUnavailable. "Occupied here meant Unavailable, it was ambiguous!!"
	
	self deny: room isReserved.
	self deny: room isAvailable.
! !

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:51:06'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:52:10' prior: 50530387!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty receive: ConferenceGuest new.
	
	
	roomWithVacationGuest := Room empty receive: VacationGuest new.


	self assert: (self defaultPriceList at: self guestTypeConference) 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

	self assert: (self defaultPriceList at: self guestTypeVacation) 
		equals: (roomWithVacationGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:52:54'!
room: roomWithConferenceGuest

	^ self assert: (self defaultPriceList at: self guestTypeConference) 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ])! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:52:54' prior: 50538052!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty receive: ConferenceGuest new.
	
	
	roomWithVacationGuest := Room empty receive: VacationGuest new.


	self room: roomWithConferenceGuest.

	self assert: (self defaultPriceList at: self guestTypeVacation) 
		equals: (roomWithVacationGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:53:32'!
room: roomWithConferenceGuest shouldProfit: aProfit

	^ self assert: aProfit 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ])! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:54:54' prior: 50538082!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty receive: ConferenceGuest new.
	
	
	roomWithVacationGuest := Room empty receive: VacationGuest new.


	self room: roomWithConferenceGuest shouldProfit: (self defaultPriceList at: self guestTypeConference).
	self room: roomWithVacationGuest shouldProfit: (self defaultPriceList at: self guestTypeVacation).
	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:55:02' prior: 50538108!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty receive: ConferenceGuest new.
	roomWithVacationGuest := Room empty receive: VacationGuest new.


	self room: roomWithConferenceGuest shouldProfit: (self defaultPriceList at: self guestTypeConference).
	self room: roomWithVacationGuest shouldProfit: (self defaultPriceList at: self guestTypeVacation).
	
! !

!methodRemoval: RoomTest #room: stamp: 'ap 4/29/2024 20:55:07'!
room: roomWithConferenceGuest

	^ self assert: (self defaultPriceList at: self guestTypeConference) 
		equals: (roomWithConferenceGuest profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ])!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:55:24' prior: 50538099!
room: aRoom shouldProfit: aProfit

	^ self assert: aProfit 
		equals: (aRoom  profitUsing: self defaultPriceList ifAbsentGuestType: [ self fail ])! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 20:56:46'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 20:56:46'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:57:44'!
keyword1: hotel

	^ self 
	should: [ 	hotel reserveRoom: 42 atFloor: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 20:57:44' prior: 50529251!
test09HotelCannotReserveANonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self keyword1: hotel
! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:00:08'!
should: aBlock with: aHotel failPreserveRoomsAndRaise: anErrorText

	^ self 
	should: aBlock
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: anErrorText equals: error messageText.
		
		self assert: aHotel	 totalRooms equals: aHotel totalRoomsAvailable.
		self assert: 0 equals: aHotel totalRoomsReserved.
		self assert: 0 equals: aHotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:01:53' prior: 50538228!
test09HotelCannotReserveANonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self should: [ 	hotel reserveRoom: 42 atFloor: 1. ] with: hotel failPreserveRoomsAndRaise: Hotel roomNumberDoesNotExistErrorDescription.
	
! !

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:01:57'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:03:01' prior: 50529273!
test10HotelCannotReserveANonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
		self should: [ 	hotel reserveRoom: 1 atFloor: 42. ] with: hotel failPreserveRoomsAndRaise: Hotel floorNumberDoesNotExistErrorDescription.
	

	
	self 
	should: [ 	hotel reserveRoom: 1 atFloor: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel floorNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:03:09' prior: 50538270!
test10HotelCannotReserveANonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
		self should: [ 	hotel reserveRoom: 1 atFloor: 42. ] with: hotel failPreserveRoomsAndRaise: Hotel floorNumberDoesNotExistErrorDescription.
	! !

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:03:10'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:03:10'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:03:54' prior: 50529358!
test11HotelCannotReceiveAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self should: [ 	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 42. ] with: hotel failPreserveRoomsAndRaise: Hotel roomNumberDoesNotExistErrorDescription.
	
	! !

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:03:57'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:03:57'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:04:37' prior: 50529295!
test12HotelCannotReceiveAtNonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.
	
	self should: [ 	hotel receive: self guestTypeVacation atFloor: 42 atRoom: 1. ] with: hotel failPreserveRoomsAndRaise: Hotel floorNumberDoesNotExistErrorDescription.
	
	! !

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:04:39'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:04:39'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:06:33'!
shouldNotReceiveWithReservationAtNonExistentRoomAndShouldPreserveReservation: hotel

	^ self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation new atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:06:33' prior: 50536579!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new setFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self shouldNotReceiveWithReservationAtNonExistentRoomAndShouldPreserveReservation: hotel! !

!methodRemoval: HotelTest #keyword1: stamp: 'ap 4/29/2024 21:06:44'!
keyword1: hotel

	^ self 
	should: [ 	hotel reserveRoom: 42 atFloor: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:06:48'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:06:52'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:06:53'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 21:06:56'!
PASSED!

!methodRemoval: Floor #setNumberOfRooms: stamp: 'ap 4/29/2024 21:07:27'!
setNumberOfRooms: aNumberOfRooms

	self class assertIsPositive: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBePositive ].
	self class assertIsInteger: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBeInteger ].
	
	self initializeRoomsWith: aNumberOfRooms.
!

!methodRemoval: Floor #setPrices: stamp: 'ap 4/29/2024 21:07:31'!
setPrices: aPriceList

	aPriceList isEmpty ifTrue: [ self class signalNoPrices ].
	
	aPriceList values do: [ :price | 
		self class assertIsPositive: price ifFalse: [ self class signalPriceMustBePositive ].
	].
	
	self initializeWith: aPriceList.!
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 21:12:03' prior: 50531132!
initializeWithGuest: aGuest
	guest := aGuest.
	occupationState := OccupiedRoomStatus of: self! !
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 21:12:07' prior: 50531153!
initializeWithoutGuest
	guest := NoGuest new.
	occupationState := AvailableRoomStatus of: self! !
!Room methodsFor: 'guests' stamp: 'ap 4/29/2024 21:12:12' prior: 50529742!
guestType

	^ guest ! !
!Room methodsFor: 'instance creation' stamp: 'ap 4/29/2024 21:13:06' prior: 50538691!
initializeWithoutGuest
	guest := #noGuest.
	occupationState := AvailableRoomStatus of: self! !
!RoomTest methodsFor: 'create' stamp: 'ap 4/29/2024 21:13:54' prior: 50530171!
guestTypeConference
	
	^ #ConferenceGuest.! !
!RoomTest methodsFor: 'create' stamp: 'ap 4/29/2024 21:13:58' prior: 50530175!
guestTypeVacation
	
	^ #VacationGuest! !
!FloorTest methodsFor: 'create' stamp: 'ap 4/29/2024 21:14:16' prior: 50535854!
guestTypeConference
	
	^ #ConferenceGuest ! !
!FloorTest methodsFor: 'create' stamp: 'ap 4/29/2024 21:14:21' prior: 50535850!
guestTypeVacation
	
	^ #VacationGuest ! !
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 21:14:25' prior: 50535301!
guestTypeConference
	
	^ #ConferenceGuest ! !
!HotelTest methodsFor: 'create' stamp: 'ap 4/29/2024 21:14:29' prior: 50535305!
guestTypeVacation
	
	^ #VacationGuest ! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:14:37' prior: 50530246!
test02ReceivingAGuestMakesTheRoomOccupied

	| room |
	
	room := Room empty.

	room receive: #VacationGuest.

	self assert: room isOccupied.

	self deny: room isAvailable.
	self deny: room isReserved.! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:14:45' prior: 50535858!
test04CannotReceiveAGuestInAOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: #VacationGuest.
	
	self 
		should: [ room receive: self guestTypeVacation new ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.

			self assert: room isOccupied.
			
			self deny: room isAvailable.
			self deny: room isReserved.
		]
	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:14:57' prior: 50531423!
test05CannotReceiveAGuestInAReservedRoom

	| room |
	
	room := Room empty.

	room reserve.
	
	self 
		should: [ room receive: #VacationGuest ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.
			
			self assert: room isUnavailable.
			
			self deny: room isAvailable.
		]

	

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:15:06' prior: 50538036!
test06ReceivingOnReservationMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: #VacationGuest.
	
	self assert: room isUnavailable. "Occupied here meant Unavailable, it was ambiguous!!"
	
	self deny: room isReserved.
	self deny: room isAvailable.
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:15:14' prior: 50530314!
test07CannotReceiveOnReservationAnAvailableRoom

	| room |
	
	room := Room empty.

	self 
		should: [ room receiveWithReservation: #VacationGuest] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.

			self assert: room isAvailable.

			self deny: room isReserved.
			self deny: room isOccupied.
		]

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:15:24' prior: 50530347!
test08CannotReceiveOnReservationAnOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: VacationGuest new.

	self 
		should: [ room receiveWithReservation: #VacationGuest] 
		raise: Error - MessageNotUnderstood 	
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.
			
			self assert: room isOccupied.

			self deny: room isReserved.
			self deny: room isAvailable.
		]

	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:15:36' prior: 50538125!
test11ProfitOfOccupiedRoomDependsOnGuestType

	| roomWithConferenceGuest roomWithVacationGuest |
	
	roomWithConferenceGuest := Room empty receive: #ConferenceGuest.
	roomWithVacationGuest := Room empty receive: #VacationGuest.


	self room: roomWithConferenceGuest shouldProfit: (self defaultPriceList at: self guestTypeConference).
	self room: roomWithVacationGuest shouldProfit: (self defaultPriceList at: self guestTypeVacation).
	
! !
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:15:59' prior: 50538801!
test08CannotReceiveOnReservationAnOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: #VacationGuest.

	self 
		should: [ room receiveWithReservation: #VacationGuest] 
		raise: Error - MessageNotUnderstood 	
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.
			
			self assert: room isOccupied.

			self deny: room isReserved.
			self deny: room isAvailable.
		]

	
! !

!classRemoval: #NoGuest stamp: 'ap 4/29/2024 21:16:15'!
Guest subclass: #NoGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classRemoval: #VacationGuest stamp: 'ap 4/29/2024 21:16:15'!
ActualGuest subclass: #VacationGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classRemoval: #ConferenceGuest stamp: 'ap 4/29/2024 21:16:15'!
ActualGuest subclass: #ConferenceGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classRemoval: #ActualGuest stamp: 'ap 4/29/2024 21:16:15'!
Guest subclass: #ActualGuest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classRemoval: #Guest stamp: 'ap 4/29/2024 21:16:15'!
Object subclass: #Guest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:17:03'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:17:03'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:17:03'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:17:03'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:17:14' prior: 50538740!
test04CannotReceiveAGuestInAOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: #VacationGuest.
	
	self 
		should: [ room receive: self guestTypeVacation] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.

			self assert: room isOccupied.
			
			self deny: room isAvailable.
			self deny: room isReserved.
		]
	
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:17:35'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:17:35'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:17:35'!
FAILURE!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:17:41'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:17:41'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:17:41'!
FAILURE!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:17:45'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:17:46'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:46'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:17:47'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:17:48'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:17:49'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:17:49'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:17:50'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:17:52'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:17:53'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:17:54'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:17:54'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:18:35'!
FAILURE!
!Room methodsFor: 'private' stamp: 'ap 4/29/2024 21:18:53' prior: 50536023!
profitWhenOccupiedUsing: aPriceList ifAbsentGuessType: unknownGuestTypeBlock

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:18:56'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:18:59'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:18:59'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:18:59'!
ERROR!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:19:14' prior: 50536364!
test07HotelProfitsAreTheSumOfEachFloorProfits
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel withFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	self assert: floor1 totalProfits + floor2 totalProfits equals:		hotel totalProfits.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:19:32' prior: 50538481!
shouldNotReceiveWithReservationAtNonExistentRoomAndShouldPreserveReservation: hotel

	^ self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:19:34'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 21:19:40'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 21:19:40'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 21:19:40'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 21:19:40'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 21:19:40'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 21:19:40'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 21:19:40'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 21:19:40'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 21:19:40'!
ERROR!
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:19:48' prior: 50536790!
test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne

	| floor |
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor receive: self guestTypeVacation at: 1.
	
	self assert: 9 equals: floor totalRoomsAvailable. 
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 0 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:19:55' prior: 50536919!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne

	| floor roomsAvailable roomsOccupied roomsReserved |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor reserveAt: 1.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	floor receiveWithReservation: self guestTypeVacation at: 1.
	
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied  + 1 equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:20:04' prior: 50536736!
test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor receive: self guestTypeVacation at: 1.
	floor receive: self guestTypeConference at: 2 .
	floor reserveAt: 3.
		
	self assert: (100*peso) + (200*peso) + (50*peso) equals: floor totalProfits
! !
!FloorTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:20:11' prior: 50536674!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor |
	
	
	floor := Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	"Tech Debt"
	floor receive: self guestTypeVacation at: 1.
	floor receive: self guestTypeConference at: 2 .
	floor reserveAt: 3.
		
	self assert: (200*peso) * 7 equals: floor totalLosses
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 21:20:17'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 21:20:17'!
PASSED!
!Floor methodsFor: 'testing' stamp: 'ap 4/29/2024 21:21:40'!
allRoomsAvailable
	
	^ self totalRooms = self totalRoomsAvailable

		
! !
!Room methodsFor: 'testing' stamp: 'ap 4/29/2024 21:21:40'!
allRoomsAvailable

	^ occupationState isAvailable! !
!RoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40'!
allRoomsAvailable
	^false! !
!AvailableRoomStatus methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' overrides: 50539451!
allRoomsAvailable
	^true! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50538938!
test04CannotReceiveAGuestInAOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: #VacationGuest.
	
	self 
		should: [ room receive: self guestTypeVacation] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.

			self assert: room isOccupied.
			
			self deny: room allRoomsAvailable.
			self deny: room isReserved.
		]
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50538757!
test05CannotReceiveAGuestInAReservedRoom

	| room |
	
	room := Room empty.

	room reserve.
	
	self 
		should: [ room receive: #VacationGuest ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotEmptyErrorDescription equals: error messageText.
			
			self assert: room isUnavailable.
			
			self deny: room allRoomsAvailable.
		]

	

	
! !
!TestCase methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 16975664!
setUpResources
			
	self resources do: [:res | res allRoomsAvailable ifFalse: [^res signalInitializationError]].
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50538835!
test08CannotReceiveOnReservationAnOccupiedRoom

	| room |
	
	room := Room empty.

	room receive: #VacationGuest.

	self 
		should: [ room receiveWithReservation: #VacationGuest] 
		raise: Error - MessageNotUnderstood 	
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.
			
			self assert: room isOccupied.

			self deny: room isReserved.
			self deny: room allRoomsAvailable.
		]

	
! !
!Floor methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50527569!
totalRoomsAvailable
	
	^rooms count: [ :room | room allRoomsAvailable ]
		
! !
!TestResource class methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 16975939!
isAvailable
	^self current notNil and: [self current allRoomsAvailable]
			! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50529504!
test01NewRoomsAreAvailable

	| room |
	
	room := Room empty.

	self assert: room allRoomsAvailable.
	
	self deny: room isOccupied.
	self deny: room isReserved.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50538731!
test02ReceivingAGuestMakesTheRoomOccupied

	| room |
	
	room := Room empty.

	room receive: #VacationGuest.

	self assert: room isOccupied.

	self deny: room allRoomsAvailable.
	self deny: room isReserved.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50538772!
test06ReceivingOnReservationMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.
	
	room receiveWithReservation: #VacationGuest.
	
	self assert: room isUnavailable. "Occupied here meant Unavailable, it was ambiguous!!"
	
	self deny: room isReserved.
	self deny: room allRoomsAvailable.
! !
!Floor methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50535042!
isEmpty
	rooms collect: [:aRoom | aRoom allRoomsAvailable ifFalse: [^false]].
	^true! !
!TestSuite methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 16977136!
setUpResources
			
	self resources do: [ :res | res allRoomsAvailable ifFalse: [^res signalInitializationError]].
	! !
!TestResource methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 16975891!
isUnavailable
	"override to provide information on the
	readiness of the resource"
	
	^self allRoomsAvailable not
			! !
!FloorTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50528228!
test04WhenAFloorIsCreatedAllTheRoomsAreAvailable

	| floor |
	
	floor :=  Floor floorWithRoomAmount: 10 andPrices: self defaultPriceList.
	
	self assert: floor allRoomsAvailable.
	self assert: 0 equals: floor totalRoomsOccupied.
	self assert: 0 equals: floor totalRoomsReserved.
! !
!Floor methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50527527!
totalLosses
	
	| total |
	
	total := 0*peso.
	rooms do: [ :room | room allRoomsAvailable ifTrue: [ total := total + prices values max ] ].

	^ total

		
! !
!TestResource class methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 16975943!
isUnavailable

	^self allRoomsAvailable not
			! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50538785!
test07CannotReceiveOnReservationAnAvailableRoom

	| room |
	
	room := Room empty.

	self 
		should: [ room receiveWithReservation: #VacationGuest] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo:  [ 	:error |
			self assert: Room roomIsNotReservedErrorDescription equals: error messageText.

			self assert: room allRoomsAvailable.

			self deny: room isReserved.
			self deny: room isOccupied.
		]

	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50537994!
test03ReservingARoomMakesTheRoomUnavailable

	| room |
	
	room := Room empty.

	room reserve.

	self assert: room isUnavailable. "Occupied here meant Unavailable, it was ambiguous"

	self deny: room allRoomsAvailable.
! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50531148!
isAvailable

	^ occupationState allRoomsAvailable! !
!Room methodsFor: 'as yet unclassified' stamp: 'ap 4/29/2024 21:21:40' prior: 50539446!
allRoomsAvailable

	^ occupationState allRoomsAvailable! !

!methodRemoval: Floor #isAvailable stamp: 'ap 4/29/2024 21:21:40'!
isAvailable
	
	^ self totalRooms = self totalRoomsAvailable

		
!

!methodRemoval: Room #isAvailable stamp: 'ap 4/29/2024 21:21:40'!
isAvailable

	^ occupationState allRoomsAvailable!

!methodRemoval: RoomStatus #isAvailable stamp: 'ap 4/29/2024 21:21:40'!
isAvailable
	^false!

!methodRemoval: AvailableRoomStatus #isAvailable stamp: 'ap 4/29/2024 21:21:40'!
isAvailable
	^true!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 21:21:46'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:21:49'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:21:54'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:22:04'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:22:04'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:23:01' prior: 50529338!
test08HotelLossesAreTheSumOfEachFloorLosses
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self defaultlyPricedTenRoomFloor.
	floor2 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel withFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	hotel reserveRoom: 4 atFloor: 1.
	hotel reserveRoom: 2 atFloor: 2.

	self assert: floor1 totalLosses + floor2 totalLosses equals:		hotel totalLosses.! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:23:13' prior: 50538253!
test09HotelCannotReserveANonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel withFloors: floors.
	
	self should: [ 	hotel reserveRoom: 42 atFloor: 1. ] with: hotel failPreserveRoomsAndRaise: Hotel roomNumberDoesNotExistErrorDescription.
	
! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:23:18' prior: 50538296!
test10HotelCannotReserveANonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := Hotel withFloors: floors.
	
		self should: [ 	hotel reserveRoom: 1 atFloor: 42. ] with: hotel failPreserveRoomsAndRaise: Hotel floorNumberDoesNotExistErrorDescription.
	! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:23:22' prior: 50538357!
test11HotelCannotReceiveAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := Hotel withFloors: floors.
	
	self should: [ 	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 42. ] with: hotel failPreserveRoomsAndRaise: Hotel roomNumberDoesNotExistErrorDescription.
	
	! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:23:27' prior: 50538419!
test12HotelCannotReceiveAtNonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel withFloors: floors.
	
	self should: [ 	hotel receive: self guestTypeVacation atFloor: 42 atRoom: 1. ] with: hotel failPreserveRoomsAndRaise: Hotel floorNumberDoesNotExistErrorDescription.
	
	! !
!HotelTest methodsFor: 'testing' stamp: 'ap 4/29/2024 21:23:31' prior: 50538500!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self defaultlyPricedTenRoomFloor.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel withFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self shouldNotReceiveWithReservationAtNonExistentRoomAndShouldPreserveReservation: hotel! !

!methodRemoval: Hotel #setFloors: stamp: 'ap 4/29/2024 21:23:37'!
setFloors: aFloorsCollection

	self class assertHaveFloors: aFloorsCollection.

	floors := aFloorsCollection.
	
	availableRoomsCount := self totalRooms.!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:23:49'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 21:23:51'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:23:53'!
PASSED!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 21:24:25'!
Object subclass: #Room
	instanceVariableNames: 'guest occupationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Hotel methodsFor: 'totals' stamp: 'ap 4/29/2024 21:25:07' prior: 50527727!
totalRoomsAvailable

	^floors sum: [:thisFloor |
		thisFloor totalRoomsAvailable.
		].! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:25:12'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 21:25:15'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:25:18'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:25:18'!
PASSED!
!Hotel methodsFor: 'initialization' stamp: 'ap 4/29/2024 21:25:28' prior: 50528860!
initializeWithFloors: aFloorList.

	floors := aFloorList.

! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 21:25:39' prior: 50537543!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	(self roomAt: aRoomNumber atFloor: aFloorNumber)  receive: aGuestType.

! !
!Hotel methodsFor: 'guests' stamp: 'ap 4/29/2024 21:25:45' prior: 50537560!
reserveRoom: aRoomNumber atFloor: aFloorNumber

	(self roomAt: aRoomNumber atFloor: aFloorNumber) reserve.
! !

Object subclass: #Hotel
	instanceVariableNames: 'floors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Hotel category: #'ISW1-2024-1C-Parcial' stamp: 'ap 4/29/2024 21:25:57'!
Object subclass: #Hotel
	instanceVariableNames: 'floors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsIncreasesOccupiedAndReducesTheReservedByOne stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedByOne stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'ap 4/29/2024 21:26:00'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'ap 4/29/2024 21:26:01'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomUnavailable stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsTheMaxPriceInList stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'ap 4/29/2024 21:26:04'!
PASSED!

----STARTUP---- (29 April 2024 21:32:44) as /home/Estudiante/Documentos/agus/linux64/linux64/CuisUniversity-6169.image!


----End fileIn of /home/Estudiante/Documentos/agus/linux64/linux64-UserFiles/FileOuts/ISW1-2024-1C-Parcial.st----!